module Authentications.View exposing (listView)

import Dict
import Set exposing (Set)
import Html exposing (Html, text)
import Html.Attributes exposing (class)
import Html.Utils exposing (toggleSortOnClick, mx2Button, anchoredText)
import Bootstrap.Table as Table
import Bootstrap.Modal as Modal
import Bootstrap.Button as Button
import Markdown
import Utils exposing (ite)
import Repo exposing (Repo)
import Repo.Messages exposing (Msg(..))
import Authentications exposing (Authentication, AuthType(Hipchat))


listView : Set Repo.EntityId -> Repo Authentication -> Html (Msg Authentication)
listView usedAuthIds authRepo =
    let
        ( hipchatAuthDict, otherAuthDict ) =
            Dict.partition (\id auth -> auth.data.type_ == Hipchat) authRepo.dict

        cardBlock title subtitle description contents =
            Html.div [ class "card mb-4" ]
                [ Html.div [ class "card-block" ]
                    [ Html.h4 [ class "card-title" ] [ anchoredText title ]
                    , Html.p [ class "card-subtitle text-muted" ]
                        [ Markdown.toHtml [] subtitle ]
                    , Html.div [ class "card-text" ] [ description ]
                    , contents
                    ]
                ]

        table labels dict =
            Table.table
                { options = [ Table.striped, Table.hover, Table.responsive, Table.small, Table.bordered ]
                , thead = labels |> List.map (text >> List.singleton >> Table.th []) |> Table.simpleThead
                , tbody = dict |> Repo.dictToSortedList authRepo.sort |> List.map (authRow usedAuthIds) |> Table.tbody []
                }

        otherDescription =
            Markdown.toHtml [ class "small" ] """
- `Bearer` type: `Authorization : Bearer TOKEN0123456789`
- `Raw` type: `Authorization : TOKEN0123456789`
            """
    in
        Html.div []
            [ hipchatAuthDict
                |> table [ "Label", "Token", "Actions" ]
                |> cardBlock "Hipchat Notification Tokens" "Room notification token generated by room admin." (text "")
            , otherAuthDict
                |> table [ "Label", "Type", "Token", "Actions" ]
                |> cardBlock "Other Credentials" "Credentials that go to `Authorization` header on request." otherDescription
            , deleteModalView authRepo.deleteModal
            ]


authRow : Set Repo.EntityId -> Repo.Entity Authentication -> Table.Row (Msg Authentication)
authRow usedAuthIds auth =
    let
        maskedToken =
            auth.data.token
                |> String.toList
                |> List.indexedMap (\i x -> ite (i < 5) x '*')
                |> String.fromList

        ( deleteButtonOptions, deleteButtonString ) =
            if Set.member auth.id usedAuthIds then
                ( [ Button.disabled True, Button.small ], "Used" )
            else
                ( [ Button.danger, Button.small ], "Delete" )
    in
        [ Just (text auth.data.name)
        , ite (auth.data.type_ == Hipchat) Nothing (Just (text (toString auth.data.type_)))
        , Just (Html.pre [] [ text (maskedToken) ])
        , Just (mx2Button (OnDeleteModal auth Modal.visibleState) deleteButtonOptions deleteButtonString)
        ]
            |> List.filterMap identity
            |> List.map (List.singleton >> Table.td [])
            |> Table.tr []


deleteModalView : Repo.ModalState Authentication -> Html (Msg Authentication)
deleteModalView { target, modalState } =
    Modal.config (OnDeleteModal target)
        |> Modal.h4 [] [ text "Deleting Credential" ]
        |> Modal.body []
            [ Html.p [] [ text ("ID: " ++ target.id) ]
            , Html.pre [] [ text target.data.token ]
            , Html.p [] [ text "Are you sure?" ]
            ]
        |> Modal.footer []
            [ mx2Button (OnDeleteConfirmed target.id) [ Button.danger ] "Yes, delete"
            , mx2Button (OnDeleteModal target Modal.hiddenState) [] "Cancel"
            ]
        |> Modal.view modalState
